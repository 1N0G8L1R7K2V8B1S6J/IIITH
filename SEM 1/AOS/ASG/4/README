 
# <h2>Mini-Torrent</h2>
A peer to peer(P2P) file tansfer protocol to share data over the network where the peers can
share or download files amongst the members belonging to same group.
<ul>
<li>Synchronized trackers : Maintain metadata about the peers along with their group details,files shared, port and IP addresses.</li>
<li>Parallel Downloading: Support for fast download with multiple pieces coming and downloaded from multiple clients simultaneously.</li>
<li>Various modules for client such as create groups, list requests, stop sharing , Show downloads, logout etc.</li>
</ul>
<b>Key Area</b>: C++, PThread, Socket programming,Multi Threading

<h2>Architecture Overview</h2>
The system consists of following entities:<br>
SYNCHRONIZED TRACKERS:<ul>
<li> Maintain information of clients with their files(shared by client) to assist the clients
for the communication between peers</li>
<li>Trackers should be synchronized i.e all the trackers if online should be in sync
with each other</li></ul>
CLIENTS:<br/>
<ul>
<li>Client creates an account, register with tracker and login using the user credentials.</li>
<li>Client can create groups, fetch list of all groups,request to join groups, leave groups, accept join requests(if owner).</li>
<li>Share file across group: Share the filename and SHA1 hash of the complete file
as well as piecewise SHA1 with the tracker.</li>
<li>Download file:<br/>1.Retrieve peer information from tracker for the file.<br/>2.Download file from multiple peers (different pieces of file from
different peers - <b>piece selection algorithm)</b>  simultaneously and all the
files which client downloads will be shareable to other users in the same
group.</li>
<b><i>Ensured file integrity from SHA1 comparison</b></i>
<li>Stop sharing all files(Logout)</li>
<li>Whenever client logins, all previously shared files before logout 
automatically goes on sharing mode.</li>
</ul>
<h2>Compile and Run Code</h2>
<ul>
<li> g++ -o client client.cpp -lpthread -lcrypto<br>./client</li>
<li>g++ -o tracker tracker.cpp -lpthread -lcrypto<br>./tracker</li>
</ul>


<h2>Commands:</h2>
<ol type='A'>
<li>Run Client:<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<b>./client</b> Enter the port and IP address.</li>
<li>Create User Account:<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<b>create_user</b> &ltuser_id&gt &ltpasswd&gt</li>
<li>Login:<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<b>login</b> &ltuser_id&gt &ltpasswd&gt</li>
<li>Create Group:<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<b>create_group</b> &ltgroup_id&gt</li>
<li>Join Group:<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<b>join_group</b> &ltgroup_id&gt</li>
  
<li>Leave Group:<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<b>leave_group</b> &ltgroup_id&gt</li>
<li>List pending join requests:<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<b>list_requests</b> &ltgroup_id&gt</li>
<li>Accept Group Joining Request:<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<b>accept_request</b> &ltgroup_id&gt &ltuser_id&gt</li>
<li>List All Group In Network:<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<b>list_groups</b></li>
<li>List All sharable Files In Group:<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<b>list_files</b> <group_id></li>
<li>Upload File:<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<b>upload_file</b> &ltfile_path&gt &ltgroup_id&gt</li>
<li>Download File:<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<b>download_file</b> &ltgroup_id&gt &ltfile_name&gt &ltdestination_path&gt</li>
<li>Logout:<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<b>logout</b></li>


</ol>


# Bittorrent-Client-Implementation

## Description

This project is a peer-to-peer file sharing network that enables users to share, download, and remove files from the group they belong to. Download happens parallelly with multiple pieces from multiple peers. It follows a similar concept to popular file sharing protocols like BitTorrent found on the internet.

The architecture of this Mini-Torr project consists of multiple clients (users) and a tracker. The tracker plays a crucial role in maintaining the network by storing metadata related to the files and users. Specifically, the tracker maintains a mapping of files to the users who possess them. This mapping helps clients discover other users who have the desired files they wish to download.

## Directory Structure

```
├── README.md
├── client
│   ├── Makefile
│   ├── client.cpp
│   ├── server.cpp
│   ├── tracker_info.txt
│   ├── utils.cpp
│   └── utils.h
└── tracker
    ├── Makefile
    ├── server.cpp
    ├── tracker.cpp
    ├── tracker_info.txt
    ├── utils.cpp
    └── utils.h

```

## Functional Requirements

The network for the Mini-torrent project will consist of the following entities:

1. Tracker(Centralized Server):

   - Maintain information of clients with their files (shared by client) to assist the clients for communication between peers.
   - Tracker should be online all the time.

2. Clients:
   - Users should create an account and register with the tracker.
   - Login using the user credentials.
   - Create a group and become the owner of that group.
   - Fetch a list of all groups in the server.
   - Request to join a group.
   - Leave a group.
   - Accept group join requests (if the client is the owner).
   - Share a file across the group: Share the filename and SHA1 hash of the complete file, as well as piecewise SHA1, with the tracker.
   - Fetch a list of all shareable files in a group.
   - Download a file:
     - Retrieve peer information from the tracker for the file.
     - **Core Part**: Download the file from multiple peers simultaneously, obtaining different pieces of the file from different peers (using a piece selection algorithm).
     - All downloaded files by the client will be shareable to other users in the same group.
     - Ensure file integrity through **SHA1** comparison.
   - Show ongoing downloads.
   - Stop sharing a file.
   - Stop sharing all files (Logout).
   - Whenever a client logs in, all previously shared files before logout should automatically be in sharing mode.

### Execution

1. Inside client directory open terminal and run "make" command.
2. Now run ./client <IP>:<PORT> tracker_info.txt to run a peer.
3. Inside tracker directory open terminal and run "make" command.
4. To run both trackers run the below commands on two different terminals
   4.1 ./tracker tracker_info.txt 1
   4.2 ./tracker tracker_info.txt 2
5. Use make clean to clear the .o files and the executable file.
6. tracker_info.txt file have the IP and Port details of all the trackers.

## Client Commands

Commands:

1. Create User Account:
   `create_user <user_id> <password>`

2. Login:
   `login <user_id> <password>`

3. Create Group:
   `create_group <group_id>`

4. Join Group:
   `join_group <group_id>`

5. Leave Group:
   `leave_group <group_id>`

6. List Pending Join:
   `list_requests <group_id>`

7. Accept Group Joining Request:
   `accept_request <group_id> <user_id>`

8. List All Groups in Network:
   `list_groups`

9. List All Sharable Files in Group:
   `list_files <group_id>`

10. Upload File:
    `upload_file <file_path> <group_id>`

11. Download File:
    `download_file <group_id> <file_name> <destination_path>`

12. Logout:
    `logout`

13. Show Downloads:
    `show_downloads`

- Output format: `[D] [grp_id] filename` or `[C] [grp_id] filename` (D - Downloading, C - Complete)

14. Stop Sharing:
    `stop_share <group_id> <file_name>`

## Implementation Details

### Socket Programming

Socket programming is employed in this Mini-Torr project to establish communication channels between the tracker and clients. Both the tracker and client continuously listen for incoming requests, enabling seamless data exchange and coordination within the peer-to-peer network.

### Multithreading

To facilitate parallel downloads and enhance performance, multithreading is utilized in the project. Each download request is assigned to a separate thread, allowing multiple file pieces to be downloaded simultaneously from different peers. This approach significantly improves the download speed and efficiency of the Mini-torrent system.

### SHA1

The SHA1 algorithm is employed to maintain data integrity within the Mini-torrent network. Chunkwise hashing using SHA1 ensures that downloaded file pieces match their corresponding checksums. By comparing the computed SHA1 hash with the expected value, the system verifies that the downloaded data has not been tampered with or corrupted during the transfer process. This integrity check mechanism helps guarantee the reliability and authenticity of shared files in the Mini-torrent network.

### Piece Selection Algorithm

- Ask Tracker to give file-peer information(i.e which peers has pieces of that file)
- Once we have the peers/clients info we connect with each peer and ask which Chunks does the peer have. Peer responds with chunk numbers it possess.
- Now, we have chunk to peer mapping(i.e for some chunk, which all peers possess it), We will take random peer and ask for that chunk.
- After downloading a chunk, if the SHA/hash matches, it is taken.
- At the end it will be checked if all the Chunks are present or not. If not, we will do the above steps again one more time, if any chunk is not having a peer that means it cannot be downloaded completely.
