Title of the Course: Data Structures & Algorithms for Problem Solving
Name of the Faculty: Vineet Gandhi
Course Code: CS1.304
Credits: 6
L - T - P : 3â€“1.5 - 3
(L - Lecture hours, T-Tutorial hours, P - Practical hours)
Semester, Year: Monsoon 2023
Name of the Program : M.Tech in CSE/CSIS
Pre-Requisites : Basic computer programming
Basic Mathematics
Course Outcomes :
After completion of this course successfully, the students will be able to:
CO-1: Understanding of fundamental and advanced Data Structures including linked-lists, trees,
binary search trees, AVL trees, stacks, queues, heaps, hash-table,tries and suffix tree.
CO-2: Ability to program data structures and use them in implementations of abstract data types.
CO-3: Ability to devise novel solutions to small scale programming challenges involving data
structures and recursion.
CO-4: Understand basic algorithms including recursion, searching, hashing, dynamic
programming, and traversal.
CO-5: Understanding of basic algorithmic complexity.Ability to perform simple inductive proofs
and proofs by contradiction and reason about program correctness and invariants.
CO-6: Given a real world problem have ability to sensibly select appropriate data structures and
algorithms for solving the problem and be able to implement the solution.
Course Topics :
(please list the order in which they will be covered, and preferably arrange these as five to six
modules.)
Unit 1: Review of basic data structures and algorithms (Linked list, stack, queue, 2D arrays,
dynamic programming, recursion etc.)
Unit 2: Algorithms on Trees and Graphs (Binary Search Tree, AVL Tree, Heaps, Graph Traversal,
shortest path algorithms etc.)
Unit 3: Problem solving with other data structures and algorithms (Hashing, Tries, Splay Trees,
Range Trees, sorting etc.)
Reference Books :Introduction to Algorithms, 3rd Edition (The MIT Press) 3rd Edition
by Thomas H. Cormen , Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein
Grading Plan :
(The table is only indicative)
Type of Evaluation Weightage (in %)
Quiz-1 5
Mid SemExam 10
Quiz-2 5
End Sem Exam 25
Assignments 20
Weekly Labs 10
Mid Lab exam 10
Final Lab exam 15
Mapping of Course Outcomes to Program Objectives:
PO1 PO2 PO3 PO4 PO5 PO6 PO7 PO8 PO9 PO10 PO11 PO12 PSO1 PSO2 PSO3 PSO4
CO1 3 3 3 2 2 2 2 1 2 1 1 3 3 3 2 3
CO2 3 3 3 2 2 1 1 1 2 1 1 3 2 2 2 2
CO3 2 3 3 2 2 2 2 3 3 2 2 2 2 2 2 2
CO4 3 3 3 2 2 2 2 1 2 1 1 3 3 3 2 3
CO5 2 2 2 3 1 1 1 1 2 1 1 3 3 2 2 3
CO6 2 2 3 2 2 2 3 2 3 3 2 2 3 2 3 3
Teaching-Learning Strategies in brief (4-5 sentences) :
The course involves heavy theory and programming components. The strategy is to first
thoroughly cover all the basics, with board-workbased teaching. The basics will be covered by
solving examples problems, analyzing complexity, writing pseudo codes on board. In second
stage, each class will introduce a problem statement, discuss solutions which go beyond the
already covered topics. Introduce the novel algorithm or data structure, solve the problem in
class and cement the idea and use case. Give them ideas on other problems where the discussed
algorithm or data structure can be applied. The course will also have weekly labs, which will allow
students to practice and code problems related to the topics covered in the class. There will be
regular assignments with focus on the problem solving aspect.